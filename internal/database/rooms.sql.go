// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rooms.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getStudentRoom = `-- name: GetStudentRoom :many
SELECT id, created_at, updated_at, name FROM rooms
WHERE name LIKE $1
`

func (q *Queries) GetStudentRoom(ctx context.Context, name string) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, getStudentRoom, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentRoomById = `-- name: GetStudentRoomById :one
SELECT id, created_at, updated_at, name FROM rooms
WHERE id = $1
`

func (q *Queries) GetStudentRoomById(ctx context.Context, id uuid.UUID) (Room, error) {
	row := q.db.QueryRowContext(ctx, getStudentRoomById, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}
