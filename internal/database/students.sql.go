// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: students.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO
students (
        nip, 
        name, 
        email, 
        year,
        room_id,
        study_plan_id,
        phone_number, 
        nim, 
        date_of_birth,
        user_id
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, created_at, updated_at, nip, name, email, year, room_id, study_plan_id, phone_number, nim, date_of_birth, user_id
`

type CreateStudentParams struct {
	Nip         string
	Name        string
	Email       string
	Year        int32
	RoomID      uuid.UUID
	StudyPlanID uuid.UUID
	PhoneNumber string
	Nim         string
	DateOfBirth time.Time
	UserID      uuid.UUID
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, createStudent,
		arg.Nip,
		arg.Name,
		arg.Email,
		arg.Year,
		arg.RoomID,
		arg.StudyPlanID,
		arg.PhoneNumber,
		arg.Nim,
		arg.DateOfBirth,
		arg.UserID,
	)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Nip,
		&i.Name,
		&i.Email,
		&i.Year,
		&i.RoomID,
		&i.StudyPlanID,
		&i.PhoneNumber,
		&i.Nim,
		&i.DateOfBirth,
		&i.UserID,
	)
	return i, err
}

const deleteStudentById = `-- name: DeleteStudentById :one
DELETE FROM students
WHERE id = $1
RETURNING id, created_at, updated_at, nip, name, email, year, room_id, study_plan_id, phone_number, nim, date_of_birth, user_id
`

func (q *Queries) DeleteStudentById(ctx context.Context, id uuid.UUID) (Student, error) {
	row := q.db.QueryRowContext(ctx, deleteStudentById, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Nip,
		&i.Name,
		&i.Email,
		&i.Year,
		&i.RoomID,
		&i.StudyPlanID,
		&i.PhoneNumber,
		&i.Nim,
		&i.DateOfBirth,
		&i.UserID,
	)
	return i, err
}

const getStudentAll = `-- name: GetStudentAll :many
SELECT id, created_at, updated_at, nip, name, email, year, room_id, study_plan_id, phone_number, nim, date_of_birth, user_id FROM students
ORDER BY updated_at DESC
`

func (q *Queries) GetStudentAll(ctx context.Context) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, getStudentAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Nip,
			&i.Name,
			&i.Email,
			&i.Year,
			&i.RoomID,
			&i.StudyPlanID,
			&i.PhoneNumber,
			&i.Nim,
			&i.DateOfBirth,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentById = `-- name: GetStudentById :one
SELECT id, created_at, updated_at, nip, name, email, year, room_id, study_plan_id, phone_number, nim, date_of_birth, user_id FROM students
WHERE id = $1
`

func (q *Queries) GetStudentById(ctx context.Context, id uuid.UUID) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudentById, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Nip,
		&i.Name,
		&i.Email,
		&i.Year,
		&i.RoomID,
		&i.StudyPlanID,
		&i.PhoneNumber,
		&i.Nim,
		&i.DateOfBirth,
		&i.UserID,
	)
	return i, err
}

const getStudentByNameOrNim = `-- name: GetStudentByNameOrNim :many
SELECT id, created_at, updated_at, nip, name, email, year, room_id, study_plan_id, phone_number, nim, date_of_birth, user_id FROM students
WHERE name LIKE $1 AND nim LIKE $2
`

type GetStudentByNameOrNimParams struct {
	Name string
	Nim  string
}

func (q *Queries) GetStudentByNameOrNim(ctx context.Context, arg GetStudentByNameOrNimParams) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, getStudentByNameOrNim, arg.Name, arg.Nim)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Nip,
			&i.Name,
			&i.Email,
			&i.Year,
			&i.RoomID,
			&i.StudyPlanID,
			&i.PhoneNumber,
			&i.Nim,
			&i.DateOfBirth,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentsByRoomAndMajor = `-- name: GetStudentsByRoomAndMajor :many
SELECT s.id, s.created_at, s.updated_at, s.name, s.email, s.nim, 
s.phone_number, r.name as room, std.major 
FROM students as s
JOIN rooms as r
        ON s.room_id = r.id
JOIN study_plans as std
	ON s.study_plan_id = std.id
WHERE std.major = $1 OR r.name = $2
`

type GetStudentsByRoomAndMajorParams struct {
	Major string
	Name  string
}

type GetStudentsByRoomAndMajorRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
	Email       string
	Nim         string
	PhoneNumber string
	Room        string
	Major       string
}

func (q *Queries) GetStudentsByRoomAndMajor(ctx context.Context, arg GetStudentsByRoomAndMajorParams) ([]GetStudentsByRoomAndMajorRow, error) {
	rows, err := q.db.QueryContext(ctx, getStudentsByRoomAndMajor, arg.Major, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStudentsByRoomAndMajorRow
	for rows.Next() {
		var i GetStudentsByRoomAndMajorRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Email,
			&i.Nim,
			&i.PhoneNumber,
			&i.Room,
			&i.Major,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudent = `-- name: UpdateStudent :one
UPDATE students
SET email = $2, phone_number = $3, updated_at = $4
WHERE id = $1
RETURNING id, created_at, updated_at, nip, name, email, year, room_id, study_plan_id, phone_number, nim, date_of_birth, user_id
`

type UpdateStudentParams struct {
	ID          uuid.UUID
	Email       string
	PhoneNumber string
	UpdatedAt   time.Time
}

func (q *Queries) UpdateStudent(ctx context.Context, arg UpdateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, updateStudent,
		arg.ID,
		arg.Email,
		arg.PhoneNumber,
		arg.UpdatedAt,
	)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Nip,
		&i.Name,
		&i.Email,
		&i.Year,
		&i.RoomID,
		&i.StudyPlanID,
		&i.PhoneNumber,
		&i.Nim,
		&i.DateOfBirth,
		&i.UserID,
	)
	return i, err
}
