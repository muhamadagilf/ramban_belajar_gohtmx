// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: students.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (nip, name, email, year, room_id, study_plan_id, phone_number, nim)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at, nip, name, email, year, room_id, study_plan_id, phone_number, nim
`

type CreateStudentParams struct {
	Nip         int32
	Name        string
	Email       string
	Year        int32
	RoomID      uuid.UUID
	StudyPlanID uuid.UUID
	PhoneNumber string
	Nim         string
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, createStudent,
		arg.Nip,
		arg.Name,
		arg.Email,
		arg.Year,
		arg.RoomID,
		arg.StudyPlanID,
		arg.PhoneNumber,
		arg.Nim,
	)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Nip,
		&i.Name,
		&i.Email,
		&i.Year,
		&i.RoomID,
		&i.StudyPlanID,
		&i.PhoneNumber,
		&i.Nim,
	)
	return i, err
}

const deleteStudentById = `-- name: DeleteStudentById :exec
DELETE FROM students
WHERE id = $1
`

func (q *Queries) DeleteStudentById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteStudentById, id)
	return err
}

const getRecentCreatedStudent = `-- name: GetRecentCreatedStudent :one
SELECT id, created_at, updated_at, nip, name, email, year, room_id, study_plan_id, phone_number, nim FROM students
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetRecentCreatedStudent(ctx context.Context) (Student, error) {
	row := q.db.QueryRowContext(ctx, getRecentCreatedStudent)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Nip,
		&i.Name,
		&i.Email,
		&i.Year,
		&i.RoomID,
		&i.StudyPlanID,
		&i.PhoneNumber,
		&i.Nim,
	)
	return i, err
}

const getStudentAll = `-- name: GetStudentAll :many
SELECT id, created_at, updated_at, nip, name, email, year, room_id, study_plan_id, phone_number, nim FROM students
ORDER BY updated_at DESC
`

func (q *Queries) GetStudentAll(ctx context.Context) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, getStudentAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Nip,
			&i.Name,
			&i.Email,
			&i.Year,
			&i.RoomID,
			&i.StudyPlanID,
			&i.PhoneNumber,
			&i.Nim,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentById = `-- name: GetStudentById :one
SELECT id, created_at, updated_at, nip, name, email, year, room_id, study_plan_id, phone_number, nim FROM students
WHERE id = $1
`

func (q *Queries) GetStudentById(ctx context.Context, id uuid.UUID) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudentById, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Nip,
		&i.Name,
		&i.Email,
		&i.Year,
		&i.RoomID,
		&i.StudyPlanID,
		&i.PhoneNumber,
		&i.Nim,
	)
	return i, err
}

const updateStudent = `-- name: UpdateStudent :one
UPDATE students
SET email = $2, phone_number = $3, updated_at = $4
WHERE id = $1
RETURNING id, created_at, updated_at, nip, name, email, year, room_id, study_plan_id, phone_number, nim
`

type UpdateStudentParams struct {
	ID          uuid.UUID
	Email       string
	PhoneNumber string
	UpdatedAt   time.Time
}

func (q *Queries) UpdateStudent(ctx context.Context, arg UpdateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, updateStudent,
		arg.ID,
		arg.Email,
		arg.PhoneNumber,
		arg.UpdatedAt,
	)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Nip,
		&i.Name,
		&i.Email,
		&i.Year,
		&i.RoomID,
		&i.StudyPlanID,
		&i.PhoneNumber,
		&i.Nim,
	)
	return i, err
}
