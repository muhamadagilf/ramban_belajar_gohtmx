// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: collection_meta.sql

package database

import (
	"context"
	"time"
)

const addToFreelist = `-- name: AddToFreelist :exec
INSERT INTO collection_meta (name, value)
VALUES ('freelist-nim', $1)
`

func (q *Queries) AddToFreelist(ctx context.Context, value string) error {
	_, err := q.db.ExecContext(ctx, addToFreelist, value)
	return err
}

const decrementValueByName = `-- name: DecrementValueByName :exec
UPDATE collection_meta
SET value = (CAST(value as INTEGER)-1)::VARCHAR
WHERE name = $1
`

func (q *Queries) DecrementValueByName(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, decrementValueByName, name)
	return err
}

const deleteFreelistNim = `-- name: DeleteFreelistNim :exec
DELETE FROM collection_meta
WHERE name = 'freelist-nim' AND value = $1
`

func (q *Queries) DeleteFreelistNim(ctx context.Context, value string) error {
	_, err := q.db.ExecContext(ctx, deleteFreelistNim, value)
	return err
}

const getCollectionMetaLastModified = `-- name: GetCollectionMetaLastModified :one
SELECT updated_at FROM collection_meta
WHERE name = $1
`

func (q *Queries) GetCollectionMetaLastModified(ctx context.Context, name string) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, getCollectionMetaLastModified, name)
	var updated_at time.Time
	err := row.Scan(&updated_at)
	return updated_at, err
}

const getCollectionMetaValue = `-- name: GetCollectionMetaValue :one
SELECT value FROM collection_meta
WHERE name = $1
`

func (q *Queries) GetCollectionMetaValue(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRowContext(ctx, getCollectionMetaValue, name)
	var value string
	err := row.Scan(&value)
	return value, err
}

const getFreelistNim = `-- name: GetFreelistNim :one
SELECT value FROM collection_meta
WHERE name = 'freelist-nim'
ORDER BY value ASC
LIMIT 1
`

func (q *Queries) GetFreelistNim(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, getFreelistNim)
	var value string
	err := row.Scan(&value)
	return value, err
}

const incrementValueByname = `-- name: IncrementValueByname :exec
UPDATE collection_meta
SET value = (CAST(value as INTEGER)+1)::VARCHAR
WHERE name = $1
`

func (q *Queries) IncrementValueByname(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, incrementValueByname, name)
	return err
}

const updateCollectionMetaLastModified = `-- name: UpdateCollectionMetaLastModified :exec
UPDATE collection_meta
SET updated_at = NOW()
WHERE name = $1
`

func (q *Queries) UpdateCollectionMetaLastModified(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, updateCollectionMetaLastModified, name)
	return err
}
