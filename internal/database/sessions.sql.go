// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: sessions.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const cleanupRevokedSessions = `-- name: CleanupRevokedSessions :exec
DELETE FROM sessions
WHERE is_revoked = true OR expire_at < NOW()
`

func (q *Queries) CleanupRevokedSessions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, cleanupRevokedSessions)
	return err
}

const createUserSession = `-- name: CreateUserSession :one
INSERT INTO sessions (session_id, user_id, expire_at)
VALUES ($1, $2, $3)
RETURNING id, created_at, last_activity, session_id, user_id, is_revoked, expire_at
`

type CreateUserSessionParams struct {
	SessionID string
	UserID    uuid.UUID
	ExpireAt  time.Time
}

func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createUserSession, arg.SessionID, arg.UserID, arg.ExpireAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastActivity,
		&i.SessionID,
		&i.UserID,
		&i.IsRevoked,
		&i.ExpireAt,
	)
	return i, err
}

const deleteUserSession = `-- name: DeleteUserSession :exec
DELETE FROM sessions
WHERE session_id = $1
`

func (q *Queries) DeleteUserSession(ctx context.Context, sessionID string) error {
	_, err := q.db.ExecContext(ctx, deleteUserSession, sessionID)
	return err
}

const getUserSession = `-- name: GetUserSession :one
SELECT id, created_at, last_activity, session_id, user_id, is_revoked, expire_at FROM sessions
WHERE session_id = $1
`

func (q *Queries) GetUserSession(ctx context.Context, sessionID string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getUserSession, sessionID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastActivity,
		&i.SessionID,
		&i.UserID,
		&i.IsRevoked,
		&i.ExpireAt,
	)
	return i, err
}

const updateLastActivityUserSession = `-- name: UpdateLastActivityUserSession :exec
UPDATE sessions
SET last_activity = NOW()
WHERE session_id = $1
`

func (q *Queries) UpdateLastActivityUserSession(ctx context.Context, sessionID string) error {
	_, err := q.db.ExecContext(ctx, updateLastActivityUserSession, sessionID)
	return err
}

const updateRevokeStatusUserSession = `-- name: UpdateRevokeStatusUserSession :exec
UPDATE sessions
SET is_revoked = $1
WHERE session_id = $1
`

func (q *Queries) UpdateRevokeStatusUserSession(ctx context.Context, isRevoked bool) error {
	_, err := q.db.ExecContext(ctx, updateRevokeStatusUserSession, isRevoked)
	return err
}
